{"version":3,"sources":["utilities/users-api.js","utilities/users-service.js","utilities/send-request.js","utilities/decks-api.js","components/SignUpForm/SignUpForm.jsx","components/LoginForm/LoginForm.jsx","pages/AuthPage/AuthPage.jsx","components/AddCard/AddCard.jsx","pages/NewDeckPage/NewDeckPage.jsx","components/Deck/Deck.jsx","components/DecksListContainer/DecksListContainer.jsx","pages/DecksListPage/DecksListPage.jsx","components/Card/Card.jsx","components/CardListContainer/CardListContainer.jsx","pages/CardsListViewPage/CardsListViewPage.jsx","components/CardFlip/CardFlip.jsx","components/FlipViewContainer/FlipViewContainer.jsx","pages/CardsFlipViewPage/CardsFlipViewPage.jsx","components/NavBar/NavBar.jsx","components/UpdateCard/UpdateCard.jsx","pages/UpdateDeckPage/UpdateDeckPage.jsx","pages/App/App.jsx","index.js"],"names":["BASE_URL","signUp","userData","sendRequest","login","credentials","url","a","method","payload","options","headers","body","JSON","stringify","token","getToken","Authorization","fetch","res","ok","json","Error","usersAPI","localStorage","setItem","getUser","getItem","parse","atob","split","exp","Date","now","removeItem","user","console","log","getAll","createDeck","deckData","updateDeck","deck","_id","deleteDeck","SignUpForm","state","name","email","password","confirm","error","handleChange","evt","setState","target","value","handleSubmit","preventDefault","formData","props","setUser","disable","this","className","autoComplete","onSubmit","type","onChange","required","disabled","Component","LogIn","useState","setCredentials","setError","usersService","AuthPage","showLogin","setShowLogin","onClick","AddCard","card","cardKey","handleCardsInputChange","handleCardsDelete","handleChangeWithKey","id","htmlFor","word","definition","NewDeckPage","handleAddDeck","history","useHistory","description","setDeck","newCard","setNewCard","cards","setCards","wordInput","useRef","definitionInput","formRef","invalidForm","setInvalidForm","addingNewCard","setAddingNewCard","handleCardInputChange","handleDeckInputChange","idx","dupeCards","handleAddCard","newCardData","cardsArr","push","current","focus","key","splice","useEffect","hits","length","childNodes","forEach","n","localName","c","autocomplete","ref","map","onKeyDown","e","which","lastCard","Deck","handleDeleteDeck","to","pathname","DecksListContainer","decks","i","DecksListPage","Card","CardListContainer","CardsListViewPage","location","useLocation","CardFlip","currentCard","class","FlipViewContainer","setCurrentCard","HandleChangeCard","deckSize","startingCard","whereAmI","indexOf","innerHTML","CardsFlipViewPage","NavBar","exact","activeStyle","backgroundColor","UpdateCard","UpdateDeckPage","handleUpdateDeck","setUpdateDeck","defaultValue","App","setDecks","newDeckData","newCardsData","decksAPI","newDeck","updateDeckData","UpdateCardsData","decksObj","getDecks","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a79f4373.chunk.js","sourcesContent":["import { getToken } from './users-service';\n\nconst BASE_URL = '/api/users';\n\nexport function signUp(userData) {\n  return sendRequest(BASE_URL, 'POST', userData);\n}\n\nexport function login(credentials) {\n  return sendRequest(`${BASE_URL}/login`, 'POST', credentials);\n}\n\n// Again, this is for testing purposes only, you don't need it\nexport function checkToken() {\n  return sendRequest(`${BASE_URL}/check-token`);\n}\n\n/*--- Helper Functions ---*/\n\nasync function sendRequest(url, method = 'GET', payload = null) {\n  // Fetch takes an optional options object as the 2nd argument\n  // used to include a data payload, set headers, etc. \n  const options = { method };\n  if (payload) {\n    options.headers = { 'Content-Type': 'application/json' };\n    options.body = JSON.stringify(payload);\n  }\n  // Add the token\n  const token = getToken();\n  if (token) {\n    // Ensure the headers object exists\n    options.headers = options.headers || {};\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error('Bad Request');\n}","import * as usersAPI from './users-api';\n\nexport async function signUp(userData) {\n  try {\n    const token = await usersAPI.signUp(userData);\n    // Persist the token\n    localStorage.setItem('token', token);\n    return getUser();\n  } catch {\n    throw new Error('Invalid Sign Up');\n  }\n}\nexport async function login(credentials) {\n  try {\n    const token = await usersAPI.login(credentials);\n    // Persist the token\n    localStorage.setItem('token', token);\n    return getUser();\n  } catch {\n    throw new Error('Invalid Login');\n  }\n}\n\nexport function logOut() {\n  localStorage.removeItem('token');\n}\n\nexport function getToken() {\n  // getItem returns null if there's no string\n  const token = localStorage.getItem('token');\n  if (!token) return null;\n  // Check if expired, remove if it is\n  const payload = JSON.parse(atob(token.split('.')[1]));\n  // A JWT's exp is expressed in seconds, not milliseconds, so convert\n  if (payload.exp < Date.now() / 1000) {\n    localStorage.removeItem('token');\n    return null;\n  }\n  return token;\n}\n\nexport function getUser() {\n  const token = getToken();\n  // If there's a token, return the user in the payload, otherwise return null\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n","import { getToken } from './users-service'\n\nexport default async function sendRequest(url, method = 'GET', payload = null) {\n    // Fetch takes an optional options object as the 2nd argument\n    // used to include a data payload, set headers, etc. \n    const options = { method };\n    if (payload) {\n      options.headers = { 'Content-Type': 'application/json' };\n      options.body = JSON.stringify(payload);\n    }\n    // Add a token\n    const token = getToken();\n    if (token) {\n      // Ensures that the headers object exists\n      options.headers = options.headers || {};\n      options.headers.Authorization = `Bearer ${token}`;\n    }\n    const res = await fetch(url, options);\n    console.log(res)\n    // res.ok will be false if the status code set to 4xx in the controller action\n    if (res.ok) return res.json();\n    throw new Error('Bad Request');\n  }","import sendRequest from './send-request';\n\nconst BASE_URL = 'api/decks';\n\n// get all decks from mongoose documents\nexport function getAll() {\n    return sendRequest(BASE_URL);\n}\n\nexport function addCards(deck, cardsData) {\n    return sendRequest(`${BASE_URL}/${deck._id}/addCards`, 'PUT', cardsData)\n}\n\n// send deckData to mongoose to create a new deck document\nexport function createDeck(deckData) {\n    return sendRequest(BASE_URL, \"POST\", deckData);\n}\n\nexport function updateDeck(deck) {\n    return sendRequest(`${BASE_URL}/${deck._id}`, \"PUT\", deck);\n}\n\nexport function showDeck(deck) {\n    return sendRequest(`${BASE_URL}/${deck._id}`, \"GET\", deck);\n}\n\nexport function deleteDeck(deck) {\n    return sendRequest(`${BASE_URL}/${deck._id}`, \"DELETE\");\n}","import { Component } from 'react';\nimport { signUp } from '../../utilities/users-service';\n\nexport default class SignUpForm extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    confirm: '',\n    error: ''\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n      error: ''\n    });\n  };\n\n  handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      const formData = {...this.state};\n      delete formData.error;\n      delete formData.confirm;\n      const user = await signUp(formData);\n      this.props.setUser(user);\n    } catch {\n      // An error occurred\n      this.setState({ error: 'Sign Up Failed - Try Again'});\n    }\n  }\n\n  render() {\n    const disable = this.state.password !== this.state.confirm;\n    return (\n      <div>\n        <div className=\"form-container\">\n          <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n            <label>Name</label>\n            <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} required />\n            <label>Email</label>\n            <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n            <label>Confirm</label>\n            <input type=\"password\" name=\"confirm\" value={this.state.confirm} onChange={this.handleChange} required />\n            <button type=\"submit\" disabled={disable}>SIGN UP</button>\n          </form>\n        </div>\n        <p className=\"error-message\">&nbsp;{this.state.error}</p>\n      </div>\n    );\n  }\n}","import { useState } from 'react';\nimport * as usersService from '../../utilities/users-service';\n\nexport default function LogIn({ setUser }) {\n  const [credentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n\n  function handleChange(evt) {\n    setCredentials({ ...credentials, [evt.target.name]: evt.target.value });\n    setError('');\n  }\n\n  async function handleSubmit(evt) {\n    // Prevent form from being submitted to the server\n    evt.preventDefault();\n    try {\n      // The promise returned by the signUp service method \n      // will resolve to the user object included in the\n      // payload of the JSON Web Token (JWT)\n      const user = await usersService.login(credentials);\n      setUser(user);\n    } catch {\n      setError('Log In Failed - Try Again');\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"form-container\" onSubmit={handleSubmit}>\n        <form autoComplete=\"off\" >\n          <label>Email</label>\n          <input type=\"text\" name=\"email\" value={credentials.email} onChange={handleChange} required />\n          <label>Password</label>\n          <input type=\"password\" name=\"password\" value={credentials.password} onChange={handleChange} required />\n          <button type=\"submit\">LOG IN</button>\n        </form>\n      </div>\n      <p className=\"error-message\">&nbsp;{error}</p>\n    </div>\n  );\n}","import { useState } from 'react';\nimport SignUpForm from '../../components/SignUpForm/SignUpForm';\nimport LoginForm from '../../components/LoginForm/LoginForm';\n\nexport default function AuthPage({ setUser }) {\n  const [showLogin, setShowLogin] = useState(true);\n\n  return (\n    <main>\n      <h1>AuthPage</h1>\n      {showLogin ?\n        <LoginForm setUser={setUser} />\n        :\n        <SignUpForm setUser={setUser} />\n      }\n      <button onClick={() => setShowLogin(!showLogin)}>{showLogin ? 'SIGN UP' : 'LOG IN'}</button>\n    </main>\n  );\n}","import { useState, useEffect, useRef } from 'react';\nimport Component from 'react'\n\nexport default function AddCard({card, cardKey, handleCardsInputChange, handleCardsDelete}) {\n\n    function handleChangeWithKey(evt) {\n        console.log({[evt.target.name]:evt.target.value})\n        handleCardsInputChange(evt,cardKey);\n    }\n\n    function handleDeleteCardWithKey(evt) {\n        handleCardsDelete(cardKey);\n    }\n\n    return (\n        <>\n            <div id={cardKey}>  \n                <label htmlFor=\"\">Word:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"word\" value={card.word}/>\n                <label htmlFor=\"\">Definition:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"definition\" value={card.definition}/>\n                <p onClick={handleDeleteCardWithKey}>DELETE</p>\n            </div>\n        </>\n    )\n}\n","import { waitForElementToBeRemoved } from '@testing-library/react';\nimport { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport AddCard from '../../components/AddCard/AddCard'\n\nexport default function NewDeckPage({ handleAddDeck }) {\n  // useRef to check validity (all cards have definitions)\n  // const deck = useLocation().state.deck;\n  \n  const history = useHistory()\n  const [deck,setDeck] = useState({\n    name:'',\n    description:''\n  });\n  const [newCard,setNewCard] = useState({\n    word:'',\n    definition:''\n  });\n  const [cards,setCards] = useState([]);\n\n  const wordInput = useRef();\n  const definitionInput = useRef();\n  const formRef = useRef();\n  const [invalidForm, setInvalidForm] = useState(false);\n  const [addingNewCard,setAddingNewCard] = useState(true)\n  const [changeInChild,setChangeInChild] = useState(false)\n\n\n  //Checks to see that all fields have a value, otherwise the form is invalid.\n  useEffect(() => {\n    // console.log('Am I Running?')\n    let hits = 0;\n    let length = 0;\n    // console.log(formRef)\n    formRef.current.childNodes.forEach((n) => {\n      // console.log(n)\n      if(n.localName === 'textarea'){\n        length += 1\n        if(n.value) {\n          hits += 1;\n        }\n      }\n      if(n.localName === 'div') {\n        n.childNodes.forEach((c) => {\n          if(c.localName === 'textarea'){\n            length += 1\n            if(c.value) {\n              hits += 1;\n            }\n        }\n        })\n      }\n    })\n    // console.log(\"I say the form is: \", invalidForm, ' hits=',hits, ' length=', length )\n    if (hits === length) {\n      setInvalidForm(false)\n    } else {\n      setInvalidForm(true)\n    }\n  }, [cards, deck, newCard]);\n  \n\n  // useEffect(() => {\n  //   focusFirst.current.focus()\n  // },[])\n\n  function handleCardInputChange(evt) {\n    // console.log({[evt.target.name]:evt.target.value})\n    setNewCard({\n      ...newCard,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  function handleDeckInputChange(evt) {\n    console.log({[evt.target.name]:evt.target.value})\n    setDeck({\n      ...deck,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  function handleCardsInputChange(evt,idx) {\n    const dupeCards = [...cards]\n    dupeCards[idx][evt.target.name] = evt.target.value;\n    setCards(dupeCards);\n  }\n\n  async function handleAddCard(newCardData) {\n    await setAddingNewCard(true)\n    const cardsArr = [...cards];\n    cardsArr.push(newCardData);\n    setCards(cardsArr);\n    setNewCard({\n      word:'',\n      definition:''\n    });\n    wordInput.current.focus();\n    wordInput.current.value = '';\n    definitionInput.current.value = '';\n    setInvalidForm(true);\n  }\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const cardsArr = [...cards];\n    cardsArr.push(newCard);\n    handleAddDeck(deck,cardsArr);\n    history.push('/')\n  }\n\n  function checkIfTab(e) {\n    if(e.which === 9) {\n    e.preventDefault()\n    handleAddCard(newCard)\n    }\n  }\n\n  function handleCardsDelete(key) {\n    console.log('Hello?')\n    const dupeCards = [...cards]\n    dupeCards.splice(key,1);\n    console.log(dupeCards)\n    setCards(dupeCards);\n}\n\nfunction handleDeleteCard() {\n  const dupeCards = [...cards];\n  let lastCard = dupeCards.splice(-1,1);\n  console.log(wordInput.current.value)\n  wordInput.current.value = lastCard[0].word\n  definitionInput.current.value = lastCard[0].definition\n  setNewCard(lastCard[0]);\n  setCards(dupeCards);\n}\n\n  // -----Delete contents of inputs when deck is pressed\n  // useEffect(() =>{\n  //   setDeck({\n  //     name:'',\n  //     description:''\n  //   });\n  //   setNewCard({\n  //     word:'',\n  //     definition:''\n  //   });\n  //   setCards([]);\n  //   console.log(deck, 'and', cards)\n  //   setDeckBeGone(false);\n  // },[deckBeGone])\n  \n  // function handleDeckBeGone() {\n  //   setDeckBeGone(true)\n  // }\n  // console.log(invalidForm)\n  return (\n    <>\n      <h1>Make a New Deck Here</h1>\n      <form autocomplete=\"off\" ref={formRef} onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <textarea name=\"name\"  type=\"text\" onChange={handleDeckInputChange}/>\n        <label>Description:</label>\n        <textarea name=\"description\" type=\"text\" onChange={handleDeckInputChange}/>\n        {cards.map((c,idx) => \n          <AddCard \n            card={c} \n            handleCardsInputChange={handleCardsInputChange} \n            cardKey={idx}\n            handleCardsDelete={handleCardsDelete}\n            />)}\n        { addingNewCard ?\n          <>\n            <label>Word:</label>\n            <textarea name=\"word\" type=\"text\" ref={wordInput} onChange={handleCardInputChange}/>\n            <label>Definition:</label>\n            <textarea name=\"definition\" onKeyDown={checkIfTab} type=\"text\" ref={definitionInput} onChange={handleCardInputChange}/>\n            {cards.length===0?\n            <>\n            </> \n            :\n            <p onClick={handleDeleteCard}>DELETE</p>\n            }\n          </>\n          :\n          <>\n          </>\n        }\n        <button disabled={invalidForm}>submit</button>\n      </form>\n      {/* <button onClick={handleDeckBeGone}>Delete Deck!</button> */}\n      <button onClick={() => handleAddCard(newCard)}>Add Card</button>\n    </>\n  )\n}","import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom'\n\nexport default function Deck({ deck, handleDeleteDeck }) {\n\n    function deleteDeck(evt) {\n        handleDeleteDeck(deck)\n    }\n\n\n    console.log('HI IM ON THE DECK PAGE', deck )\n    return (\n        <>\n                <div>{deck.name}</div>\n                <div>{deck.description}</div>\n                <Link to={{pathname: '/edit', state:{deck}}}>UPDATE</Link>\n                <Link to={{pathname: '/list', state:{deck}}}>List View</Link>\n                <Link to={{pathname: '/flip', state:{deck}}}>Flip View</Link>\n                <button onClick={deleteDeck}>DELETE</button>\n                {/* Link to CardsFlipViewPage */}\n                {/* Link to CardsListViewPage */}\n        </>\n    );\n}","import {useState} from 'react';\nimport Deck from '../Deck/Deck'\nimport { useLocation } from 'react-router-dom'\n\nexport default function DecksListContainer({ decks, handleDeleteDeck }) {\n\n  console.log(typeof handleDeleteDeck)\n\n    const deck = decks.map((i,idx) => {\n        console.log('In the map function' , i)\n        return <Deck key={i._id} deck={i} handleDeleteDeck={handleDeleteDeck}/>\n      })\n    \n      console.log('returned from map' , deck)\n\n  return (\n    <>\n      <h1>DecksContainer</h1>\n      {deck}\n    </>\n  )\n}","import {useState} from 'react';\nimport DecksListContainer from '../../components/DecksListContainer/DecksListContainer'\n\nexport default function DecksListPage({ decks, handleDeleteDeck }) {\n  \n  console.log(typeof handleDeleteDeck)\n\n  return (\n    <>\n      <h1>My Decks</h1>\n      <DecksListContainer decks={decks} handleDeleteDeck={handleDeleteDeck} />\n    </>\n  )\n}","import { useState } from 'react';\nimport './Card.css'\n\nexport default function Card({card}) {\n    \n    return (\n        <>\n        <div>\n            {card.word}\n        </div>\n        <div>\n            {card.definition}\n        </div>\n        </>\n    );\n}","import { useState, } from 'react';\nimport Card from '../Card/Card'\n\nexport default function CardListContainer({deck}) {\n\n\n    let card = deck.cards.map((c) => {\n        return <Card card={c}/>\n    })\n\n    console.log(card)\n\n    return (\n        <>\n            {card}\n        </>\n    );\n}","import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport CardListContainer from '../../components/CardListContainer/CardListContainer';\n\nexport default function CardsListViewPage() {\n  \n  const location = useLocation() \n\n  const {state : {deck}} = useLocation()\n\n  console.log(location)\n  console.log(deck)\n  // const thisDeck = useLocation().state.deck\n  // console.log(deck)\n  return (\n    <>\n    <h1>View Card List Page</h1>\n    {deck.name}: \n    {deck.description}\n    <CardListContainer location={location} deck={deck} />\n    </>\n  )\n}","import { useState } from 'react';\nimport './CardFlip.css'\n\nexport default function CardFlip({currentCard}) {\n    \n    return (\n        <div className=\"flex-ctr-ctr\">\n            <div class=\"flip-card\">\n                <div class=\"flip-card-inner\">\n                    <div class=\"flip-card-front\">\n                        <div className=\"card-index\">1</div>\n                        <div className=\"flex-ctr-ctr card-content\">{currentCard.word}</div>\n                    </div>\n                    <div class=\"flip-card-back\">\n                        <div className=\"flex-ctr-ctr card-content\">{currentCard.definition}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import { useState } from 'react';\n\nimport CardFlip from '../../components/CardFlip/CardFlip';\n\nexport default function FlipViewContainer({ deck }) {\n\n    const [currentCard, setCurrentCard] = useState(deck.cards[0])\n\n    function HandleChangeCard(evt) {\n        let deckSize = deck.cards.length;\n        let startingCard = currentCard;\n        let whereAmI = deck.cards.indexOf(startingCard);\n\n        console.log(startingCard);\n        if(evt.target.innerHTML === 'Previous') {\n            console.log('boop left');\n            whereAmI -= 1;\n            if(whereAmI < 0) {\n                console.log('GotoEndOFDeck');\n                whereAmI = deckSize-1;\n            }\n        }\n        if(evt.target.innerHTML === 'Next') {\n            console.log('boop Right');\n            whereAmI += 1;\n            if(deck.cards[deckSize-1]._id === startingCard._id) {\n                console.log('GotoStartOFDeck');\n                whereAmI = 0;\n            }\n        }\n        console.log(whereAmI)\n        setCurrentCard(deck.cards[whereAmI])\n    }\n\n    return (\n    <>\n    <div>\n        <CardFlip currentCard={currentCard} />\n    </div>\n    <span>\n        <button onClick={HandleChangeCard}>Previous</button>\n        <button onClick={HandleChangeCard}>Next</button>\n    </span>\n    </>\n    )\n}","import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Card from '../../components/Card/Card';\nimport FlipViewContainer from '../../components/FlipViewContainer/FlipViewContainer';\n\nexport default function CardsFlipViewPage() {\n  \n\n  const {state : {deck}} = useLocation()\n\n\n\n  return (\n    <>\n      <h1>I am a PAGE</h1>\n      <h2>Name Of Deck: {deck.name}</h2>\n      <h2>Description: {deck.description}</h2>\n      <FlipViewContainer deck={deck}/>\n    </>\n  )\n}","import { Link, NavLink } from 'react-router-dom';\nimport * as userService from '../../utilities/users-service';\n\nexport default function NavBar({ user, setUser }) {\n\n  function handleLogOut() {\n    userService.logOut();\n    setUser(null);\n  }\n\n  return (\n    <nav>\n      <NavLink exact activeStyle={{backgroundColor: 'yellow'}} to=\"/\">MyDecks</NavLink>\n      &nbsp; | &nbsp;\n      <NavLink exact activeStyle={{backgroundColor: 'yellow'}} to=\"/new\">NewDeck</NavLink>\n      &nbsp; | &nbsp;\n      <span>Welcome, {user.name}</span>\n      &nbsp;&nbsp;<Link to=\"\" onClick={handleLogOut}>Log Out</Link>\n    </nav>\n  );\n}","import { useState, useEffect, useRef } from 'react';\nimport Component from 'react'\n\nexport default function UpdateCard({card, cardKey, handleCardsInputChange, handleCardsDelete}) {\n\n    function handleChangeWithKey(evt) {\n        console.log({[evt.target.name]:evt.target.value})\n        handleCardsInputChange(evt,cardKey);\n    }\n\n    function handleDeleteCardWithKey(evt) {\n        console.log('Poppa?')\n        handleCardsDelete(cardKey);\n    }\n\n    return (\n        <>  \n            <div id={cardKey}>  \n                <label htmlFor=\"\">Word:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"word\" value={card.word}/>\n                <label htmlFor=\"\">Definition:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"definition\" value={card.definition}/>\n                <p onClick={handleDeleteCardWithKey}>DELETE</p>\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState, useRef } from 'react';\nimport { Link,useLocation, useHistory} from 'react-router-dom'\nimport Card from '../../components/AddCard/AddCard'\nimport UpdateCard from '../../components/UpdateCard/UpdateCard'\n\nexport default function UpdateDeckPage({ handleUpdateDeck }) {\n  \n  let history = useHistory();\n  let location = useLocation();\n\n  const [updateDeck,setUpdateDeck] = useState({\n    name:'',\n    description:''\n  });\n  const [newCard,setNewCard] = useState({\n    word:'',\n    definition:''\n  });\n  const [cards,setCards] = useState([]);\n  const {state : {deck}} = useLocation()\n  const wordInput = useRef();\n  const definitionInput = useRef();\n  const formRef = useRef();\n  const [invalidForm, setInvalidForm] = useState(false);\n  const [addingNewCard, setAddingNewCard] = useState(true)\n  \n  console.log('HELLO I AM ON THE UPDATE PAGE', deck)\n\n  //Checks to see that all fields have a value, otherwise the form is invalid.\n  useEffect(() => {\n    // console.log('Am I Running?')\n    let hits = 0;\n    let length = 0;\n    // console.log(formRef)\n    formRef.current.childNodes.forEach((n) => {\n      // console.log(n)\n      if(n.localName === 'textarea'){\n        length += 1\n        if(n.value) {\n          hits += 1;\n        }\n      }\n      if(n.localName === 'div') {\n        n.childNodes.forEach((c) => {\n          if(c.localName === 'textarea'){\n            length += 1\n            if(c.value) {\n              hits += 1;\n            }\n        }\n        })\n      }\n    })\n    // console.log(\"I say the form is: \", invalidForm, ' hits=',hits, ' length=', length )\n    if (hits === length) {\n      setInvalidForm(false)\n    } else {\n      setInvalidForm(true)\n    }\n  }, [cards, updateDeck, newCard]);\n\n  // This unpacks the deck to set initial values\n  useEffect(() => {\n    setUpdateDeck({\n      name:deck.name,\n      description:deck.description\n    })\n    const cards = [...deck.cards]\n    let dupeCards = [...cards]\n    let lastCard = dupeCards.splice(-1,1)\n    wordInput.current.value = lastCard[0].word\n    definitionInput.current.value = lastCard[0].definition\n    setCards(dupeCards);\n    setNewCard(lastCard[0])\n  },[])\n\n  //handles the input name of the new deck\n  function handleDeckInputChange(evt) {\n    // console.log({[evt.target.name]:evt.target.value})\n    setUpdateDeck({\n      ...deck,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  //handles the input change of the newest card\n  function handleCardInputChange(evt) {\n    // console.log({[evt.target.name]:evt.target.value})\n    setNewCard({\n      ...newCard,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  //handles the input change of the rest of the cards\n  function handleCardsInputChange(evt,idx) {\n    const dupeCards = [...cards]\n    dupeCards[idx][evt.target.name] = evt.target.value;\n    setCards(dupeCards);\n\n  }\n\n  //adds new card to the deck of cards, resets new card\n  async function handleAddCard(newCardData) {\n    await setAddingNewCard(true)\n    const cardsArr = [...cards];\n    cardsArr.push(newCardData);\n    setCards(cardsArr);\n    setNewCard({\n      word:'',\n      definition:''\n    });\n    wordInput.current.focus();\n    wordInput.current.value = '';\n    definitionInput.current.value = '';\n    setInvalidForm(true)\n  }\n\n  function handleCardsDelete(key) {\n    console.log('Hello?')\n    const dupeCards = [...cards]\n    dupeCards.splice(key,1);\n    console.log(dupeCards)\n    setCards(dupeCards);\n}\n\nfunction handleDeleteCard() {\n  const dupeCards = [...cards];\n  let lastCard = dupeCards.splice(-1,1);\n  console.log(wordInput.current.value)\n  wordInput.current.value = lastCard[0].word\n  definitionInput.current.value = lastCard[0].definition\n  setNewCard(lastCard[0]);\n  setCards(dupeCards);\n}\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const cardsArr = [...cards];\n    if(newCard.definition === '' && newCard.name === '') {\n      // console.log('state is empty')\n    }\n    cardsArr.push(newCard);\n\n    console.log(location)\n    handleUpdateDeck(deck,cardsArr,deck._id);\n    // history.push(deck.url)\n  }\n\n  function checkIfTab(e) {\n    if(e.which === 9) {\n    e.preventDefault()\n    handleAddCard(newCard)\n    }\n  }\n\n  return (\n    <>\n      <h1>Make a New Deck Here</h1>\n      <form autocomplete=\"off\" ref={formRef} onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <textarea name=\"name\"  type=\"text\" defaultValue={updateDeck.name} onChange={handleDeckInputChange}/>\n        <label>Description:</label>\n        <textarea name=\"description\" type=\"text\" defaultValue={updateDeck.description} onChange={handleDeckInputChange}/>\n        {cards.map((c,idx) => \n          <UpdateCard \n            card={c} \n            handleCardsInputChange={handleCardsInputChange} \n            cardKey={idx}\n            handleCardsDelete={handleCardsDelete}\n            />)}\n        { addingNewCard ?\n          <>\n            {/* {console.log('after I Hit add card')} */}\n            <label>Word:</label>\n            <textarea name=\"word\" type=\"text\" ref={wordInput} onChange={handleCardInputChange}/>\n            <label>Definition:</label>\n            <textarea name=\"definition\" onKeyDown={checkIfTab} type=\"text\" ref={definitionInput} onChange={handleCardInputChange}/>\n            {cards.length===0 ?\n            <>\n            </> \n            :\n            <p onClick={handleDeleteCard}>DELETE</p>\n            }\n            </>\n            :\n            <>\n            </>\n        }\n        <button disabled={invalidForm}>submit</button>\n      </form>\n      {/* <button onClick={handleDeckBeGone}>Delete Deck!</button> */}\n      <button onClick={() => handleAddCard(newCard)}>Add Card</button>\n      <Link to={{pathname: '/list', state:{deck}}}>Study</Link>\n    </>\n  )\n}","import { useState, useEffect } from 'react';\nimport { Route, Switch, Redirect, useHistory } from 'react-router-dom';\nimport { getUser } from '../../utilities/users-service';\nimport './App.css';\nimport * as decksAPI from '../../utilities/decks-api'\nimport AuthPage from '../AuthPage/AuthPage';\nimport NewDeckPage from '../NewDeckPage/NewDeckPage';\nimport DecksListPage from '../DecksListPage/DecksListPage';\nimport CardsListViewPage from '../CardsListViewPage/CardsListViewPage';\nimport CardsFlipViewPage from '../CardsFlipViewPage/CardsFlipViewPage';\nimport NavBar from '../../components/NavBar/NavBar';\nimport UpdateDeckPage from '../UpdateDeckPage/UpdateDeckPage';\n\nexport default function App() {\n  const [user, setUser] = useState(getUser());\n  const [decks, setDecks] = useState([]);\n\n  //get the decks from server and set the state\n  useEffect( function() {\n    async function getDecks() {\n    const decksObj = await decksAPI.getAll();\n    setDecks(decksObj)\n    }\n    getDecks();\n  },[])\n\n    async function handleAddDeck(newDeckData, newCardsData) {\n      newDeckData.cards = newCardsData;\n      const newDeck = await decksAPI.createDeck(newDeckData);\n      setDecks([\n        ...decks,\n        newDeck\n      ])\n  }\n\n    async function handleUpdateDeck(updateDeckData, UpdateCardsData) {\n      updateDeckData.cards = UpdateCardsData;\n      const updateDeck = await decksAPI.updateDeck(updateDeckData);\n    }\n\n    async function handleDeleteDeck(deck){\n      await decksAPI.deleteDeck(deck);\n      const decksObj = await decksAPI.getAll();\n      setDecks(decksObj)\n    }\n\n  return (\n    <main className=\"App\">\n      { user ?\n          <>\n            <NavBar user={user} setUser={setUser} />\n            <Switch>\n              <Route path=\"/new\">\n                <NewDeckPage handleAddDeck={handleAddDeck}/>\n              </Route>\n              <Route path=\"/decks\">\n                <DecksListPage decks={decks} handleDeleteDeck={handleDeleteDeck} />\n              </Route>\n              <Route path=\"/list\">\n                <CardsListViewPage />\n              </Route>\n              <Route path=\"/flip\">\n                <CardsFlipViewPage />\n              </Route>\n              <Route path=\"/edit\">\n                <UpdateDeckPage handleDeleteDeck={handleDeleteDeck} handleUpdateDeck={handleUpdateDeck}/>\n              </Route>\n              <Redirect to=\"/decks\" />\n            </Switch>\n          </>\n        :\n          <AuthPage setUser={setUser}/>\n      }\n    </main>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './pages/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}