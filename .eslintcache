[{"/Users/richardwilliams/code/snapflash/src/index.js":"1","/Users/richardwilliams/code/snapflash/src/pages/App/App.jsx":"2","/Users/richardwilliams/code/snapflash/src/utilities/users-service.js":"3","/Users/richardwilliams/code/snapflash/src/utilities/decks-api.js":"4","/Users/richardwilliams/code/snapflash/src/pages/CardsFlipViewPage/CardsFlipViewPage.jsx":"5","/Users/richardwilliams/code/snapflash/src/pages/CardsListViewPage/CardsListViewPage.jsx":"6","/Users/richardwilliams/code/snapflash/src/pages/AuthPage/AuthPage.jsx":"7","/Users/richardwilliams/code/snapflash/src/pages/UpdateDeckPage/UpdateDeckPage.jsx":"8","/Users/richardwilliams/code/snapflash/src/pages/NewDeckPage/NewDeckPage.jsx":"9","/Users/richardwilliams/code/snapflash/src/pages/DecksListPage/DecksListPage.jsx":"10","/Users/richardwilliams/code/snapflash/src/components/NavBar/NavBar.jsx":"11","/Users/richardwilliams/code/snapflash/src/utilities/send-request.js":"12","/Users/richardwilliams/code/snapflash/src/utilities/users-api.js":"13","/Users/richardwilliams/code/snapflash/src/components/CardListContainer/CardListContainer.jsx":"14","/Users/richardwilliams/code/snapflash/src/components/FlipViewContainer/FlipViewContainer.jsx":"15","/Users/richardwilliams/code/snapflash/src/components/Card/Card.jsx":"16","/Users/richardwilliams/code/snapflash/src/components/LoginForm/LoginForm.jsx":"17","/Users/richardwilliams/code/snapflash/src/components/SignUpForm/SignUpForm.jsx":"18","/Users/richardwilliams/code/snapflash/src/components/AddCard/AddCard.jsx":"19","/Users/richardwilliams/code/snapflash/src/components/UpdateCard/UpdateCard.jsx":"20","/Users/richardwilliams/code/snapflash/src/components/DecksListContainer/DecksListContainer.jsx":"21","/Users/richardwilliams/code/snapflash/src/components/CardFlip/CardFlip.jsx":"22","/Users/richardwilliams/code/snapflash/src/components/Deck/Deck.jsx":"23"},{"size":305,"mtime":1611683909381,"results":"24","hashOfConfig":"25"},{"size":2520,"mtime":1611955370212,"results":"26","hashOfConfig":"25"},{"size":1246,"mtime":1611882435580,"results":"27","hashOfConfig":"25"},{"size":755,"mtime":1611785309302,"results":"28","hashOfConfig":"25"},{"size":495,"mtime":1611880367798,"results":"29","hashOfConfig":"25"},{"size":572,"mtime":1611887418092,"results":"30","hashOfConfig":"25"},{"size":544,"mtime":1611683909382,"results":"31","hashOfConfig":"25"},{"size":5806,"mtime":1611949328183,"results":"32","hashOfConfig":"25"},{"size":5246,"mtime":1611949213669,"results":"33","hashOfConfig":"25"},{"size":374,"mtime":1611955433964,"results":"34","hashOfConfig":"25"},{"size":613,"mtime":1611787328402,"results":"35","hashOfConfig":"25"},{"size":861,"mtime":1611701921143,"results":"36","hashOfConfig":"25"},{"size":1184,"mtime":1611683909382,"results":"37","hashOfConfig":"25"},{"size":287,"mtime":1611885847619,"results":"38","hashOfConfig":"25"},{"size":1290,"mtime":1611890796946,"results":"39","hashOfConfig":"25"},{"size":255,"mtime":1611890505158,"results":"40","hashOfConfig":"25"},{"size":1394,"mtime":1611683909380,"results":"41","hashOfConfig":"25"},{"size":1714,"mtime":1611794205397,"results":"42","hashOfConfig":"25"},{"size":892,"mtime":1611866971451,"results":"43","hashOfConfig":"25"},{"size":927,"mtime":1611866983113,"results":"44","hashOfConfig":"25"},{"size":529,"mtime":1611883545382,"results":"45","hashOfConfig":"25"},{"size":716,"mtime":1611893112887,"results":"46","hashOfConfig":"25"},{"size":822,"mtime":1611949492586,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1qhzhc0",{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"50"},"/Users/richardwilliams/code/snapflash/src/index.js",[],["106","107"],"/Users/richardwilliams/code/snapflash/src/pages/App/App.jsx",["108","109","110"],"/Users/richardwilliams/code/snapflash/src/utilities/users-service.js",[],"/Users/richardwilliams/code/snapflash/src/utilities/decks-api.js",[],"/Users/richardwilliams/code/snapflash/src/pages/CardsFlipViewPage/CardsFlipViewPage.jsx",["111","112"],"import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Card from '../../components/Card/Card';\nimport FlipViewContainer from '../../components/FlipViewContainer/FlipViewContainer';\n\nexport default function CardsFlipViewPage() {\n  \n\n  const {state : {deck}} = useLocation()\n\n\n\n  return (\n    <>\n      <h1>I am a PAGE</h1>\n      <h2>Name Of Deck: {deck.name}</h2>\n      <h2>Description: {deck.description}</h2>\n      <FlipViewContainer deck={deck}/>\n    </>\n  )\n}","/Users/richardwilliams/code/snapflash/src/pages/CardsListViewPage/CardsListViewPage.jsx",["113"],"import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport CardListContainer from '../../components/CardListContainer/CardListContainer';\n\nexport default function CardsListViewPage() {\n  \n  const location = useLocation() \n\n  const {state : {deck}} = useLocation()\n\n  console.log(location)\n  console.log(deck)\n  // const thisDeck = useLocation().state.deck\n  // console.log(deck)\n  return (\n    <>\n    <h1>View Card List Page</h1>\n    {deck.name}: \n    {deck.description}\n    <CardListContainer location={location} deck={deck} />\n    </>\n  )\n}","/Users/richardwilliams/code/snapflash/src/pages/AuthPage/AuthPage.jsx",[],"/Users/richardwilliams/code/snapflash/src/pages/UpdateDeckPage/UpdateDeckPage.jsx",["114","115","116"],"import { useEffect, useState, useRef } from 'react';\nimport { useLocation, useHistory, Link} from 'react-router-dom'\nimport Card from '../../components/AddCard/AddCard'\nimport UpdateCard from '../../components/UpdateCard/UpdateCard'\n\nexport default function UpdateDeckPage({ handleUpdateDeck }) {\n  \n  let history = useHistory();\n  let location = useLocation();\n\n  const [updateDeck,setUpdateDeck] = useState({\n    name:'',\n    description:''\n  });\n  const [newCard,setNewCard] = useState({\n    word:'',\n    definition:''\n  });\n  const [cards,setCards] = useState([]);\n  const {state : {deck}} = useLocation()\n  const wordInput = useRef();\n  const definitionInput = useRef();\n  const formRef = useRef();\n  const [invalidForm, setInvalidForm] = useState(false);\n  const [addingNewCard, setAddingNewCard] = useState(true)\n  \n  console.log('HELLO I AM ON THE UPDATE PAGE', deck)\n\n  //Checks to see that all fields have a value, otherwise the form is invalid.\n  useEffect(() => {\n    // console.log('Am I Running?')\n    let hits = 0;\n    let length = 0;\n    // console.log(formRef)\n    formRef.current.childNodes.forEach((n) => {\n      // console.log(n)\n      if(n.localName === 'textarea'){\n        length += 1\n        if(n.value) {\n          hits += 1;\n        }\n      }\n      if(n.localName === 'div') {\n        n.childNodes.forEach((c) => {\n          if(c.localName === 'textarea'){\n            length += 1\n            if(c.value) {\n              hits += 1;\n            }\n        }\n        })\n      }\n    })\n    // console.log(\"I say the form is: \", invalidForm, ' hits=',hits, ' length=', length )\n    if (hits === length) {\n      setInvalidForm(false)\n    } else {\n      setInvalidForm(true)\n    }\n  }, [cards, updateDeck, newCard]);\n\n  // This unpacks the deck to set initial values\n  useEffect(() => {\n    setUpdateDeck({\n      name:deck.name,\n      description:deck.description\n    })\n    const cards = [...deck.cards]\n    let dupeCards = [...cards]\n    let lastCard = dupeCards.splice(-1,1)\n    wordInput.current.value = lastCard[0].word\n    definitionInput.current.value = lastCard[0].definition\n    setCards(dupeCards);\n    setNewCard(lastCard[0])\n  },[])\n\n  //handles the input name of the new deck\n  function handleDeckInputChange(evt) {\n    // console.log({[evt.target.name]:evt.target.value})\n    setUpdateDeck({\n      ...deck,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  //handles the input change of the newest card\n  function handleCardInputChange(evt) {\n    // console.log({[evt.target.name]:evt.target.value})\n    setNewCard({\n      ...newCard,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  //handles the input change of the rest of the cards\n  function handleCardsInputChange(evt,idx) {\n    const dupeCards = [...cards]\n    dupeCards[idx][evt.target.name] = evt.target.value;\n    setCards(dupeCards);\n\n  }\n\n  //adds new card to the deck of cards, resets new card\n  async function handleAddCard(newCardData) {\n    await setAddingNewCard(true)\n    const cardsArr = [...cards];\n    cardsArr.push(newCardData);\n    setCards(cardsArr);\n    setNewCard({\n      word:'',\n      definition:''\n    });\n    wordInput.current.focus();\n    wordInput.current.value = '';\n    definitionInput.current.value = '';\n    setInvalidForm(true)\n  }\n\n  function handleCardsDelete(key) {\n    console.log('Hello?')\n    const dupeCards = [...cards]\n    dupeCards.splice(key,1);\n    console.log(dupeCards)\n    setCards(dupeCards);\n}\n\nfunction handleDeleteCard() {\n  const dupeCards = [...cards];\n  let lastCard = dupeCards.splice(-1,1);\n  console.log(wordInput.current.value)\n  wordInput.current.value = lastCard[0].word\n  definitionInput.current.value = lastCard[0].definition\n  setNewCard(lastCard[0]);\n  setCards(dupeCards);\n}\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const cardsArr = [...cards];\n    if(newCard.definition === '' && newCard.name === '') {\n      // console.log('state is empty')\n    }\n    cardsArr.push(newCard);\n\n    console.log(location)\n    handleUpdateDeck(deck,cardsArr,deck._id);\n    // history.push(deck.url)\n  }\n\n  function checkIfTab(e) {\n    if(e.which === 9) {\n    e.preventDefault()\n    handleAddCard(newCard)\n    }\n  }\n\n  return (\n    <>\n      <h1>Make a New Deck Here</h1>\n      <form autocomplete=\"off\" ref={formRef} onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <textarea name=\"name\"  type=\"text\" defaultValue={updateDeck.name} onChange={handleDeckInputChange}/>\n        <label>Description:</label>\n        <textarea name=\"description\" type=\"text\" defaultValue={updateDeck.description} onChange={handleDeckInputChange}/>\n        {cards.map((c,idx) => \n          <UpdateCard \n            card={c} \n            handleCardsInputChange={handleCardsInputChange} \n            cardKey={idx}\n            handleCardsDelete={handleCardsDelete}\n            />)}\n        { addingNewCard ?\n          <>\n            {/* {console.log('after I Hit add card')} */}\n            <label>Word:</label>\n            <textarea name=\"word\" type=\"text\" ref={wordInput} onChange={handleCardInputChange}/>\n            <label>Definition:</label>\n            <textarea name=\"definition\" onKeyDown={checkIfTab} type=\"text\" ref={definitionInput} onChange={handleCardInputChange}/>\n            {cards.length===0 ?\n            <>\n            </> \n            :\n            <p onClick={handleDeleteCard}>DELETE</p>\n            }\n            </>\n            :\n            <>\n            </>\n        }\n        <button disabled={invalidForm}>submit</button>\n      </form>\n      {/* <button onClick={handleDeckBeGone}>Delete Deck!</button> */}\n      <button onClick={() => handleAddCard(newCard)}>Add Card</button>\n      <Link to={{pathname: '/list', state:{deck}}}>View List</Link>\n      <Link to={{pathname: '/flip', state:{deck}}}>View List</Link>\n    </>\n  )\n}","/Users/richardwilliams/code/snapflash/src/pages/NewDeckPage/NewDeckPage.jsx",["117","118","119"],"import { waitForElementToBeRemoved } from '@testing-library/react';\nimport { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport AddCard from '../../components/AddCard/AddCard'\n\nexport default function NewDeckPage({ handleAddDeck }) {\n  // useRef to check validity (all cards have definitions)\n  // const deck = useLocation().state.deck;\n  \n  const history = useHistory()\n  const [deck,setDeck] = useState({\n    name:'',\n    description:''\n  });\n  const [newCard,setNewCard] = useState({\n    word:'',\n    definition:''\n  });\n  const [cards,setCards] = useState([]);\n\n  const wordInput = useRef();\n  const definitionInput = useRef();\n  const formRef = useRef();\n  const [invalidForm, setInvalidForm] = useState(false);\n  const [addingNewCard,setAddingNewCard] = useState(true)\n  const [changeInChild,setChangeInChild] = useState(false)\n\n\n  //Checks to see that all fields have a value, otherwise the form is invalid.\n  useEffect(() => {\n    // console.log('Am I Running?')\n    let hits = 0;\n    let length = 0;\n    // console.log(formRef)\n    formRef.current.childNodes.forEach((n) => {\n      // console.log(n)\n      if(n.localName === 'textarea'){\n        length += 1\n        if(n.value) {\n          hits += 1;\n        }\n      }\n      if(n.localName === 'div') {\n        n.childNodes.forEach((c) => {\n          if(c.localName === 'textarea'){\n            length += 1\n            if(c.value) {\n              hits += 1;\n            }\n        }\n        })\n      }\n    })\n    // console.log(\"I say the form is: \", invalidForm, ' hits=',hits, ' length=', length )\n    if (hits === length) {\n      setInvalidForm(false)\n    } else {\n      setInvalidForm(true)\n    }\n  }, [cards, deck, newCard]);\n  \n\n  // useEffect(() => {\n  //   focusFirst.current.focus()\n  // },[])\n\n  function handleCardInputChange(evt) {\n    // console.log({[evt.target.name]:evt.target.value})\n    setNewCard({\n      ...newCard,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  function handleDeckInputChange(evt) {\n    console.log({[evt.target.name]:evt.target.value})\n    setDeck({\n      ...deck,\n      [evt.target.name]:evt.target.value\n    })\n  }\n\n  function handleCardsInputChange(evt,idx) {\n    const dupeCards = [...cards]\n    dupeCards[idx][evt.target.name] = evt.target.value;\n    setCards(dupeCards);\n  }\n\n  async function handleAddCard(newCardData) {\n    await setAddingNewCard(true)\n    const cardsArr = [...cards];\n    cardsArr.push(newCardData);\n    setCards(cardsArr);\n    setNewCard({\n      word:'',\n      definition:''\n    });\n    wordInput.current.focus();\n    wordInput.current.value = '';\n    definitionInput.current.value = '';\n    setInvalidForm(true);\n  }\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const cardsArr = [...cards];\n    cardsArr.push(newCard);\n    handleAddDeck(deck,cardsArr);\n    history.push('/')\n  }\n\n  function checkIfTab(e) {\n    if(e.which === 9) {\n    e.preventDefault()\n    handleAddCard(newCard)\n    }\n  }\n\n  function handleCardsDelete(key) {\n    console.log('Hello?')\n    const dupeCards = [...cards]\n    dupeCards.splice(key,1);\n    console.log(dupeCards)\n    setCards(dupeCards);\n}\n\nfunction handleDeleteCard() {\n  const dupeCards = [...cards];\n  let lastCard = dupeCards.splice(-1,1);\n  console.log(wordInput.current.value)\n  wordInput.current.value = lastCard[0].word\n  definitionInput.current.value = lastCard[0].definition\n  setNewCard(lastCard[0]);\n  setCards(dupeCards);\n}\n\n  // -----Delete contents of inputs when deck is pressed\n  // useEffect(() =>{\n  //   setDeck({\n  //     name:'',\n  //     description:''\n  //   });\n  //   setNewCard({\n  //     word:'',\n  //     definition:''\n  //   });\n  //   setCards([]);\n  //   console.log(deck, 'and', cards)\n  //   setDeckBeGone(false);\n  // },[deckBeGone])\n  \n  // function handleDeckBeGone() {\n  //   setDeckBeGone(true)\n  // }\n  // console.log(invalidForm)\n  return (\n    <>\n      <h1>Make a New Deck Here</h1>\n      <form autocomplete=\"off\" ref={formRef} onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <textarea name=\"name\"  type=\"text\" onChange={handleDeckInputChange}/>\n        <label>Description:</label>\n        <textarea name=\"description\" type=\"text\" onChange={handleDeckInputChange}/>\n        {cards.map((c,idx) => \n          <AddCard \n            card={c} \n            handleCardsInputChange={handleCardsInputChange} \n            cardKey={idx}\n            handleCardsDelete={handleCardsDelete}\n            />)}\n        { addingNewCard ?\n          <>\n            <label>Word:</label>\n            <textarea name=\"word\" type=\"text\" ref={wordInput} onChange={handleCardInputChange}/>\n            <label>Definition:</label>\n            <textarea name=\"definition\" onKeyDown={checkIfTab} type=\"text\" ref={definitionInput} onChange={handleCardInputChange}/>\n            {cards.length===0?\n            <>\n            </> \n            :\n            <p onClick={handleDeleteCard}>DELETE</p>\n            }\n          </>\n          :\n          <>\n          </>\n        }\n        <button disabled={invalidForm}>submit</button>\n      </form>\n      {/* <button onClick={handleDeckBeGone}>Delete Deck!</button> */}\n      <button onClick={() => handleAddCard(newCard)}>Add Card</button>\n    </>\n  )\n}","/Users/richardwilliams/code/snapflash/src/pages/DecksListPage/DecksListPage.jsx",["120","121","122"],"/Users/richardwilliams/code/snapflash/src/components/NavBar/NavBar.jsx",[],"/Users/richardwilliams/code/snapflash/src/utilities/send-request.js",[],"/Users/richardwilliams/code/snapflash/src/utilities/users-api.js",[],"/Users/richardwilliams/code/snapflash/src/components/CardListContainer/CardListContainer.jsx",["123"],"import { useState, } from 'react';\nimport Card from '../Card/Card'\n\nexport default function CardListContainer({deck}) {\n\n\n    let card = deck.cards.map((c) => {\n        return <Card card={c}/>\n    })\n\n    console.log(card)\n\n    return (\n        <>\n            {card}\n        </>\n    );\n}","/Users/richardwilliams/code/snapflash/src/components/FlipViewContainer/FlipViewContainer.jsx",[],"/Users/richardwilliams/code/snapflash/src/components/Card/Card.jsx",["124"],"import { useState } from 'react';\nimport './Card.css'\n\nexport default function Card({card}) {\n    \n    return (\n        <>\n        <div>\n            {card.word}\n        </div>\n        <div>\n            {card.definition}\n        </div>\n        </>\n    );\n}","/Users/richardwilliams/code/snapflash/src/components/LoginForm/LoginForm.jsx",[],"/Users/richardwilliams/code/snapflash/src/components/SignUpForm/SignUpForm.jsx",[],"/Users/richardwilliams/code/snapflash/src/components/AddCard/AddCard.jsx",["125","126","127","128"],"import { useState, useEffect, useRef } from 'react';\nimport Component from 'react'\n\nexport default function AddCard({card, cardKey, handleCardsInputChange, handleCardsDelete}) {\n\n    function handleChangeWithKey(evt) {\n        console.log({[evt.target.name]:evt.target.value})\n        handleCardsInputChange(evt,cardKey);\n    }\n\n    function handleDeleteCardWithKey(evt) {\n        handleCardsDelete(cardKey);\n    }\n\n    return (\n        <>\n            <div id={cardKey}>  \n                <label htmlFor=\"\">Word:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"word\" value={card.word}/>\n                <label htmlFor=\"\">Definition:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"definition\" value={card.definition}/>\n                <p onClick={handleDeleteCardWithKey}>DELETE</p>\n            </div>\n        </>\n    )\n}\n","/Users/richardwilliams/code/snapflash/src/components/UpdateCard/UpdateCard.jsx",["129","130","131","132"],"import { useState, useEffect, useRef } from 'react';\nimport Component from 'react'\n\nexport default function UpdateCard({card, cardKey, handleCardsInputChange, handleCardsDelete}) {\n\n    function handleChangeWithKey(evt) {\n        console.log({[evt.target.name]:evt.target.value})\n        handleCardsInputChange(evt,cardKey);\n    }\n\n    function handleDeleteCardWithKey(evt) {\n        console.log('Poppa?')\n        handleCardsDelete(cardKey);\n    }\n\n    return (\n        <>  \n            <div id={cardKey}>  \n                <label htmlFor=\"\">Word:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"word\" value={card.word}/>\n                <label htmlFor=\"\">Definition:</label>\n                <textarea type=\"text\" onChange={handleChangeWithKey} name=\"definition\" value={card.definition}/>\n                <p onClick={handleDeleteCardWithKey}>DELETE</p>\n            </div>\n        </>\n    )\n}\n","/Users/richardwilliams/code/snapflash/src/components/DecksListContainer/DecksListContainer.jsx",["133","134"],"import {useState} from 'react';\nimport Deck from '../Deck/Deck'\nimport { useLocation } from 'react-router-dom'\n\nexport default function DecksListContainer({ decks, handleDeleteDeck }) {\n\n  console.log(typeof handleDeleteDeck)\n\n    const deck = decks.map((i,idx) => {\n        console.log('In the map function' , i)\n        return <Deck key={i._id} deck={i} handleDeleteDeck={handleDeleteDeck}/>\n      })\n    \n      console.log('returned from map' , deck)\n\n  return (\n    <>\n      <h1>DecksContainer</h1>\n      {deck}\n    </>\n  )\n}","/Users/richardwilliams/code/snapflash/src/components/CardFlip/CardFlip.jsx",["135"],"import { useState } from 'react';\nimport './CardFlip.css'\n\nexport default function CardFlip({currentCard}) {\n    \n    return (\n        <div className=\"flex-ctr-ctr\">\n            <div class=\"flip-card\">\n                <div class=\"flip-card-inner\">\n                    <div class=\"flip-card-front\">\n                        <div className=\"card-index\">1</div>\n                        <div className=\"flex-ctr-ctr card-content\">{currentCard.word}</div>\n                    </div>\n                    <div class=\"flip-card-back\">\n                        <div className=\"flex-ctr-ctr card-content\">{currentCard.definition}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/richardwilliams/code/snapflash/src/components/Deck/Deck.jsx",["136","137"],"import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom'\n\nexport default function Deck({ deck, handleDeleteDeck }) {\n\n    function deleteDeck(evt) {\n        handleDeleteDeck(deck)\n    }\n\n    console.log('HI IM ON THE DECK PAGE', deck )\n    return (\n        <>\n                <div>{deck.name}</div>\n                <div>{deck.description}</div>\n                <Link to={{pathname: `/edit`, state:{deck}}}>UPDATE</Link>\n                <Link to={{pathname: '/list', state:{deck}}}>List View</Link>\n                <Link to={{pathname: '/flip', state:{deck}}}>Flip View</Link>\n                <button onClick={deleteDeck}>DELETE</button>\n                {/* Link to CardsFlipViewPage */}\n                {/* Link to CardsListViewPage */}\n        </>\n    );\n}",{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":35,"nodeType":"144","messageId":"145","endLine":2,"endColumn":45},{"ruleId":"142","severity":1,"message":"146","line":38,"column":13,"nodeType":"144","messageId":"145","endLine":38,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":67,"column":106,"nodeType":"149","endLine":68,"endColumn":15},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"151","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":12},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"151","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":12},{"ruleId":"142","severity":1,"message":"152","line":8,"column":7,"nodeType":"144","messageId":"145","endLine":8,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":75,"column":5,"nodeType":"155","endLine":75,"endColumn":7,"suggestions":"156"},{"ruleId":"142","severity":1,"message":"157","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":35},{"ruleId":"142","severity":1,"message":"158","line":26,"column":10,"nodeType":"144","messageId":"145","endLine":26,"endColumn":23},{"ruleId":"142","severity":1,"message":"159","line":26,"column":24,"nodeType":"144","messageId":"145","endLine":26,"endColumn":40},{"ruleId":"142","severity":1,"message":"160","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":16},{"ruleId":"142","severity":1,"message":"161","line":2,"column":9,"nodeType":"144","messageId":"145","endLine":2,"endColumn":18},{"ruleId":"142","severity":1,"message":"150","line":2,"column":20,"nodeType":"144","messageId":"145","endLine":2,"endColumn":28},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"161","line":1,"column":20,"nodeType":"144","messageId":"145","endLine":1,"endColumn":29},{"ruleId":"142","severity":1,"message":"162","line":1,"column":31,"nodeType":"144","messageId":"145","endLine":1,"endColumn":37},{"ruleId":"142","severity":1,"message":"163","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":17},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"161","line":1,"column":20,"nodeType":"144","messageId":"145","endLine":1,"endColumn":29},{"ruleId":"142","severity":1,"message":"162","line":1,"column":31,"nodeType":"144","messageId":"145","endLine":1,"endColumn":37},{"ruleId":"142","severity":1,"message":"163","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":17},{"ruleId":"142","severity":1,"message":"150","line":1,"column":9,"nodeType":"144","messageId":"145","endLine":1,"endColumn":17},{"ruleId":"142","severity":1,"message":"164","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":21},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"150","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":18},{"ruleId":"142","severity":1,"message":"164","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":21},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'updateDeck' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","'useState' is defined but never used.","'Card' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'deck.cards', 'deck.description', and 'deck.name'. Either include them or remove the dependency array.","ArrayExpression",["167"],"'waitForElementToBeRemoved' is defined but never used.","'changeInChild' is assigned a value but never used.","'setChangeInChild' is assigned a value but never used.","'STATES' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Component' is defined but never used.","'useLocation' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},"Update the dependencies array to be: [deck.cards, deck.description, deck.name]",{"range":"170","text":"171"},[2160,2162],"[deck.cards, deck.description, deck.name]"]